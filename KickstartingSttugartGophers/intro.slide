Introduction to Go

Adel Zaalouk

11 Dec 2017

Tags: go, golang, intro, overview

* But, First...
- Big thank you to [[http://www.zoi.de/][ZOI]] for hosting this event


* About Stuttgart Gophers
- Each session will have one or two (related) talks totaling roughly 50 minutes, with a 15-20 minute Q&A after each talk
- Depending on popularity, will have regular meetings every month or every two months
- Upcoming Talks? You will help me decide that! 
- Always looking for heros (speakers)
- If you have suggestions for a topic, or want to cover something specific, please email me
- Location may change if there is not enough room for everyone  -- if you or your company can host a meeting, please email me 
- Meetup Group: [[https://www.meetup.com/Stuttgart-Gophers/][meetup.com/Stuttgart-Gophers]]. 

* The Go Language
- Current Release: [[https://golang.org/doc/devel/release.html][go1.9.2 (released 2017/10/25)]]
- Developed internally by Google to solve the kind of problems unique to Google (ie, high scale services/systems)
- Designers/developers of Go have deep ties to C/Unix (Ken Thompson, Rob Pike, Robert Griesemer, et al)

* So what is Go?
- Go is a compiled programming language in the tradition of C and C++, with static typing, garbage collection, and unique language features enabling concurrent programming
- Hello Stuttgart (src/hello.go):
.code src/hello.go

* Feature Overview
- Small and powerful standard library
- Garbage collected
- Cross-compile and deploy almost anywhere
- Super-fast compiles and single binary deploys
- Language/standard library are UTF-8 native
- Design and behavior of language/standard library is opinionated
- Since v1.5, compiler toolchain is written in Go
- Built in unit testing
- Easy integration with C code/libraries
- Language slogan:  "Less is more" 


* Long Story Short...
- Great hybrid  of Pthon, C, Java, Ruby, and a variety of other languages
- The static typing, easy compilation, and rapid "compile and deploy anywhere" ability makes it uniquely suited to doing large systems coding without getting lost in dependency/JVM hell
- Has one of the strongest ecosystems forming around the language, with the best written packages/libraries coming out over the last 2 years
- Makes one hell of a rival for backend frameworks / languages (e.g., Ruby, PHP, Python, NodeJS, and .NET) as well as Enterprise Java
- More-or-less eliminates the problems unique to scripted *and* compiled languages 

* How to Install Go
- Download binaries from [[https://golang.org/dl][golang.org/dl]]
- Or, install from source:
.code src/install.sh

* Hello World again:
.code src/hello.go

* Run/Build/Install example:
- Run:
    $ go run hello.go
- Build and Execute:
    $ go build hello.go
    $ ls
    hello hello.go
    $ ./hello
- Install (puts hello in $GOPATH/bin/):
    $ go install

* Some Notes on Go's Syntax/Design
- Go designers have purposefully omitted many common features in other languages in the interest of simplicity and readability above almost all else
- The idea is that if it can already be done through some other feature available to the language, then there is no need to add useless language features

* Packages and go get
- Go code is grouped in "packages" and is simply a directory containing one or more .go files
- Packages are retrievable via go get:
    $ go get -u github.com/knq/baseconv
- The above will fetch the Go code via HTTP and store it in $GOPATH/src/:
    $ cd $GOPATH/src/github.com/knq/baseconv
    $ ls
    baseconv.go  baseconv_test.go  coverage.out  coverage.sh  example  LICENSE  old  README.md
- A package may have any number of sub directories each of which is its own package, ie:
    github.com/knq/baseconv              // would import "baseconv"
    github.com/knq/baseconv/subpackage   // would import "subpackage"

* Package Imports, and Visibility
- Packages (ie, libraries) can be imported into the current package:
    import  "github.com/knq/baseconv"
- Only func's and type's defined in that package beginning with a capital letter are visible when imported:
    func doSomething() {} // not visible
    func DoSomething() {} // visible
- For example:
    import (
        "fmt"
    )
    fmt.Println("foobar")
- When in doubt, start the name with a capital
- main is the special package for building an executable

* More on import
- You can change the name of the import package:
    import (
        j "github.com/knq/baseconv" 
    )
    // baseconv's exported funcs/types are now available under 'j':
    j.Decode62()
- Some packages need to be imported for their side-effect:
    import (
        // imports the postgres database driver package 
        _ "github.com/lib/pq"
    )

* Building, Testing, and Installing a Go package
.code src/build.txt

* Quick Syntax Primer
- C-like, but:
- No semicolons -- every line break implies a semicolon
- Variable names are declared before the type
- Braces are required for control statements
- Parentheses are not used in control statements
- Typing is implicit in assignments
- Unused import or variable is a compiler error
- Trailing commas are required
- Standard syntax formatting that is applied automatically with gofmt

* C vs Go, a simple comparison
.code src/simple.c
.code src/simple.go

* Operators
- Usual operators:
    +    &     +=    &=     &&    ==    !=    (    )
    -    |     -=    |=     ||    <     <=    [    ]
    *    ^     *=    ^=     <-    >     >=    {    }
    /    <<    /=    <<=    ++    =     :=    ,    ;
    %    >>    %=    >>=    --    !     ...   .    :
         &^          &^=
- Note: operators are only are available as a single expression (cannot be inlined), ie:
    // valid
    i++
    j--

    // not valid
    j[i++]
- Otherwise, operators work as expected:
    j *= 10
    i = i + 15

* Variables and Declaration/Assignment
- Variable names can include any UTF-8 code point
    var a = ""
    var 世界 = 15
    b := "awesome"
    var f bool
    b = "different string"
- Supports multiple return values from functions:
    func someFunc() (int, int) { return 7, 10 }
    a, b := someFunc() // a = 7, b = 10
- Special typeless variable _ can be used as placeholder if you need to ignore a return value:
    a, b, _ = anotherFunc()

* Const
- Go way for constants
- A const can be any expression:
const (
    // typed const
    MyConst string = "hello" 

    // not typed
    Aconst = 0
)
- iota is special value for incrementing constants:
const (
    MyConstA = iota // 0
    MyConstB        // 1
    MyConstC        // 2
)

* Standard Types (builtin)
.code src/builtin.txt

* Slices, Maps, Arrays
- There are fixed-length arrays, but rarely are used:
    var a [8]byte
- A slice provides a dynamic amount of any type:
    var a = []int{15, 20, 9}
    for i := range a {
        fmt.Printf(">> %d\n", a[i])
    }
- Maps (known as hashes in other languages) provides a robust map of key, value pairs for any type:
    var a = map[string]int{
        \"foo\": 10,
        \"bar\": 15,
    }
    for k, v := range a {
        fmt.Printf(">> %s: %d\n", k, v)
    }

* make and new
- make is used to make either a slice, map or channel:
    a := make([]string, 15)           // a has type '[]string' and initial length of 15
    b := make(map[string]interface{}) // b has type 'map[string]interface{}'
    c := make(chan *Point)            // c has type 'chan *Point'
- new allocates a new instance of the type and returns a pointer to the allocated instance:
    b := new(Point) // b has type '*Point'
    p := &Point{}   // more or less the same as new(Point)

* append, len, and reslicing
- append is used to append to a slice
    b := []string{"foo", "bar"}
    b = append(b, "another string")
- len provides the length for slices, maps, or strings:
    a := map[string]int{0, 12}
    b := []int{14, 13, 3}
    fmt.Printf("%d\n", len(a)) // prints 2
    fmt.Printf("%d\n", len(b)) // prints 3
    fmt.Printf("%d\n", len("hello")) // prints 5
- Any slice or array can be resliced:
    a := []string{"foo", "bar", "make", "new"}
    b := a[:1]  // slice from 0 to 1
    c := a[1:3] // slice from 1 to 3
    d := a[1:]  // slice from 1 to len(a)

* Functions
- Functions are declared with func, and the return type follows the parameter list:
    func doNothing(a string, c int) error {
        return nil
    }
- A func can be assigned to a variable:
    func someFuncName() error
    a := someFuncName // a has type 'func() error'
- A func can also be declared inline:
    func main() {
        var g := func() {
            doSomething()
        }
        g()
        func(b int) {
          fmt.Printf("%d\n", b)
        }(10)
    }

* defer
- defer is a really great feature of Go that allows any func to be executed after the func has ended
    func doSomething() error {
        db, err := sql.Open(/* ... */)
        if err != nil {
            return err
        }
        defer db.Close()

        err = db.Exec("DELETE ...")
        /* ... */
    }

* panic and recover
- panic allows immediate halt of the current goroutine:
    panic("some error")
- recover() can only be called in defer'd func's, but allows recover from a panic:
    func myFunc() {
        defer func() {
            if e := recover(); e != nil {
                log.Printf("run time panic: %v", e)
            }
        }()

        panic("my panic")
    }

* Variadic parameters
- func can have variable args (variadic)
- Must be last parameter
- Special symbol ... to indicate expansion:
    func doSomething(prefix string, intList ...int) {
        for m, n := range intList {
            fmt.Printf("> %s (%d): %d\n", prefix, m, n) 
        }
    }
- Can expand also:
    j := append([]string{}, strList...)

* Type Declaration
- No classes or objects
- struct provides compound ("structured") types:
    type Point struct {
        X, Y float64
    }
- and interface defines a set of func's:
    type Reader interface {
        Read([]byte) (int, error)
    }
- Can create a type alias for any other type:
    type MyUnsignedInteger uint32
    type MyPoint Point
    type MyReader Reader
    type MyFunc func(string) error

* Notes on Types
- Same export / visibility rules apply for struct members, for instance only Go code in the same package as Point can see Point's member j
    type Point struct {
        X, Y float64
        j    int
    }
- Type conversions (casts) are always explicit!
    type MyStr string
    a := MyStr("blah")
    var b string = a // error

* Receivers
- A func can have a type as a receiver:
    type MyType struct {
        MyValue int
    }

    // AddOne returns MyType's MyValue by 1.
    func (mt MyType) AddOne() int {
        return mt.MyValue+1
    }
- A func with a pointer receiver, allows the func to modify the receiver:
    // Increment increments MyType's MyValue and returns the result.
    func (mt *MyType) Increment() int {
        mt.MyValue++
        return mt.MyValue
    }

* About interface
- Unlike Java or other object-oriented languages, there is no need to explicitly declare a type as having an interface:
    type Reader interface {
        Read([]byte) (int, error)
    }

    type MyReader string

    // Read satisfies the Reader interface. 
    func (mr MyReader) Read([]byte) (int, error) { /* ... */ }

    // DoSomething does something with a Reader.
    func DoSomething(r Reader) { /* ... */ }

    func main() {
        s := MyReader("hello")
        DoSomething(s)
    }

* Pointers, Interfaces, and nil
- Pointers are similar to pointers in C/C++ (address to a variable), but there is no pointer math in Go!
- . is used for both pointer dereference and for accessing a member variable:
    a := Point{}  // b has type 'Point'
    b := &Point{} // b has type '*Point'
    *b = Point{}  // assign a differnt point to b
    
    // . is used for both a and b:
    fmt.Printf(">> (%d %d) (%d %d)\n", a.X, a.Y, b.X, b.Y)
- Any variable pointer or interface can be assigned the nil value:
    var a *Point = nil
    var b MyReader = nil

* Goroutines and Channels
- Killer features of Go that provides lightweight concurrency in any Go application
- Any func in Go can be a goroutine:
    func main() {
        for i := 0; i < 10; i++ {
            go func(z int) {
                fmt.Printf(">> %d\n", z)
            }(i)
        }
        time.Sleep(1*time.Second)
    }
- Channels are a unique feature in Go that provides type safe memory sharing
    c := make(chan int)
    c <- 10 // write 10 to c
    j := <-c  // read int from c


* Goroutine and Channel example
.code src/channels.go /^func main/,/^}/

* Control Statements
- if/else if/else:
    if cond {
        expr
    } else if cond {
        expr
    } else {
        expr
    }
- switch/case/default:
    switch v {
    case "e":
        // something
    default:
        // default
    }
- switch does not require break statements and cases do not automatically fallthrough

* Control Statements
- switch as replacement for complex if/else chains:
    switch {
    case i == 0 && err != nil:
        // something
    case i == 6:
        // something
    case j == 9:
        // something
    default:
        // default
    }
- select is like switch, but waits on a channel:
    select {
    case a := <-c:
        // read a from channel c
    case <-time.After(15*time.Second):
        // a 'timeout' after 15 seconds
    }

* Control Statements
- Only loop is for:
    for cond {
    }

    for {
        if !cond {
            break
        }
    }

    for i := 0; i < len(someSlice); i++ {
    }

    for key, value := range someSlice {
    }
- In Go, while is spelled "for"

* Handling Errors
- No try/case equivalent
- Breaking flow should be done by checking for an error:
    func MyFunc() error {
        return errors.New("error encountered")
    }

    err := MyFunc()
    if err != nil {
        // handle error
    }
- Utility func in the standard library fmt package:
    fmt.Errorf("encountered: %d at %s", line, str) // returns a error

* Error Types
- error is a interface
- Any type can be an error by satisfying the error interface:
    type MyError struct {}
    func (me *MyError) Error() string {
        return "my error"
    }

    func doSomething() error {
        return &MyError{}
    }

* Quick Overview of the Standard Library
- fmt, strings, strconv -- string formating, utility, and conversion
- io -- input/output package
- sync -- synchronization primitives
- time -- robust time handling/formatting
- net/http -- http library for build servers and clients
- text/template, html/template -- template libraries that provide a simple templating library
- database/sql -- standardized sql interface
- encoding/json -- json encoding/decoding (also packages for xml, csv, etc)
- crypto/rsa crypto/elliptic -- cryptographic libs
- reflect, regexp -- reflection and regular expressions
- And many many many more!

* Q&A
